{"version":3,"sources":["optimizers.js","tensor.js","TensorflowApp.js","index.js"],"names":["OPTIMIZERS","sgd","libelle","fn","lr","tf","adam","adagrad","adadelta","momentum","rmsprop","createModel","units","learningRate","optimizer","model","add","dense","inputShape","compile","selectOptimizer","loss","input","label","a","epochs","fit","initialModelOptions","modelReducer","state","action","type","value","parseFloat","parseInt","TensorflowApp","useReducer","modelOptions","dispatch","useState","modelReady","setModelReady","target","setTarget","prediction","setPrediction","targetPredict","setTargetPredict","setModel","handleChangeModelOptions","e","useEffect","predict","data","then","toFixed","toString","arraySync","map","x","y","htmlFor","id","onChange","Object","keys","key","disabled","onClick","trainModel","Number","href","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.eccded34.chunk.js","sourcesContent":["import * as tf from \"@tensorflow/tfjs\";\n\nexport const OPTIMIZERS = {\n  sgd: { libelle: \"sgd\", fn: (lr) => tf.train.sgd(lr) },\n  adam: { libelle: \"adam\", fn: (lr) => tf.train.adam(lr) },\n  adagrad: { libelle: \"adagrad\", fn: (lr) => tf.train.adagrad(lr) },\n  adadelta: { libelle: \"adadelta\", fn: (lr) => tf.train.adadelta(lr) },\n  momentum: { libelle: \"momentum\", fn: (lr) => tf.train.momentum(lr, 1) },\n  rmsprop: { libelle: \"rmsprop\", fn: (lr) => tf.train.rmsprop(lr) },\n};\n","import * as tf from \"@tensorflow/tfjs\";\nimport { OPTIMIZERS } from \"./optimizers\";\n\nexport function generateData() {\n  const input = tf.tensor([0, 2, 4, 7, 10, 20, 50], [7, 1]);\n  const label = tf.tensor([5, 9, 13, 19, 25, 45, 105], [7, 1]);\n  return [input, label];\n}\n\nexport function createModel({\n  units = 1,\n  learningRate = 0.01,\n  optimizer = \"adam\",\n}) {\n  const selectOptimizer = (optimizer) => {\n    return OPTIMIZERS[optimizer].fn(learningRate);\n  };\n\n  const model = tf.sequential();\n  model.add(tf.layers.dense({ units, inputShape: [1] }));\n  model.compile({\n    optimizer: selectOptimizer(optimizer),\n    loss: \"meanSquaredError\",\n  });\n  return model;\n}\n\nexport async function trainModel(model, input, label, epochs = 150) {\n  await model.fit(input, label, { epochs });\n}\n","import React, { useEffect, useReducer, useState } from \"react\";\nimport { createModel, generateData, trainModel } from \"./tensor\";\nimport { OPTIMIZERS } from \"./optimizers\";\nimport * as tf from \"@tensorflow/tfjs-core\";\n\nconst initialModelOptions = {\n  optimizer: \"adam\",\n  learningRate: 0.01,\n  epochs: 50,\n};\n\nfunction modelReducer(state, action) {\n  switch (action.type) {\n    case \"SET_OPTIMIZER\":\n      return { ...state, optimizer: action.value };\n    case \"SET_LEARNINGRATE\":\n      return { ...state, learningRate: parseFloat(action.value) };\n    case \"SET_EPOCHS\":\n      return { ...state, epochs: parseInt(action.value) };\n    default:\n      return state;\n  }\n}\n\nfunction TensorflowApp() {\n  const [input, label] = generateData();\n  const [modelOptions, dispatch] = useReducer(\n    modelReducer,\n    initialModelOptions\n  );\n  const [modelReady, setModelReady] = useState(true);\n  const [target, setTarget] = useState(0);\n  const [prediction, setPrediction] = useState(\"\");\n  const [targetPredict, setTargetPredict] = useState(target * 2 + 5);\n  const [model, setModel] = useState(createModel(modelOptions));\n\n  const handleChangeTarget = (e) => {\n    setTarget(Number(e.target.value));\n  };\n\n  const handleChangeModelOptions = (action) => (e) => {\n    dispatch({ type: action, value: e.target.value });\n  };\n\n  const handleTrain = () => {\n    setModelReady(false);\n    trainModel(model, input, label, modelOptions.epochs).then(() =>\n      setModelReady(true)\n    );\n  };\n\n  useEffect(() => {\n    setTarget(0);\n    setPrediction(\"0\");\n    setModel(createModel(modelOptions));\n  }, [modelOptions]);\n\n  useEffect(() => {\n    setTargetPredict(target * 2 + 5);\n    model\n      .predict(tf.tensor([target]))\n      .data()\n      .then((data) => setPrediction(parseFloat(data).toFixed(2).toString()));\n  }, [target]);\n\n  return (\n    <div>\n      <h1>Tensorflowjs in React</h1>\n\n      <section>\n        <h2>1. Data</h2>\n        <table>\n          <tbody>\n            <tr>\n              <td>input</td>\n              {input.arraySync().map((x) => (\n                <td key={x}>{x}</td>\n              ))}\n            </tr>\n            <tr>\n              <td>label</td>\n              {label.arraySync().map((y) => (\n                <td key={y}>{y}</td>\n              ))}\n            </tr>\n          </tbody>\n        </table>\n      </section>\n\n      <section>\n        <h2>2. Model</h2>\n        <label htmlFor=\"optiFn\">Optimizer function</label>\n        <select\n          id=\"optiFn\"\n          value={modelOptions.optimizer}\n          onChange={handleChangeModelOptions(\"SET_OPTIMIZER\")}\n        >\n          {Object.keys(OPTIMIZERS).map((key) => (\n            <option key={key} value={OPTIMIZERS[key].libelle}>\n              {OPTIMIZERS[key].libelle}\n            </option>\n          ))}\n        </select>\n\n        <label htmlFor=\"learningRate\">Learning rate</label>\n        <input\n          id=\"learningRate\"\n          value={modelOptions.learningRate}\n          onChange={handleChangeModelOptions(\"SET_LEARNINGRATE\")}\n          disabled={!modelReady}\n          type=\"number\"\n        />\n      </section>\n\n      <section>\n        <h2>3. Training</h2>\n        <label htmlFor=\"epochs\">Epochs</label>\n        <input\n          id=\"epochs\"\n          value={modelOptions.epochs}\n          onChange={handleChangeModelOptions(\"SET_EPOCHS\")}\n          disabled={!modelReady}\n          type=\"number\"\n        />\n        <div>{`${modelReady ? \"Model is ready\" : \"Model is training...\"}`}</div>\n        <button onClick={handleTrain} disabled={!modelReady}>\n          Train model\n        </button>\n      </section>\n\n      <section>\n        <h2>4. Predict</h2>\n        <label htmlFor=\"target\">Input</label>\n        <input\n          id=\"target\"\n          value={target}\n          onChange={handleChangeTarget}\n          disabled={!modelReady}\n          type=\"number\"\n        />\n      </section>\n\n      <section>\n        <h2>5. Results</h2>\n        <p>\n          Expected result : {`${target} * 2 + 5 = `}\n          <strong>{targetPredict}</strong>\n        </p>\n        <p>\n          Predicted result :<strong> {prediction} </strong>\n        </p>\n      </section>\n\n      <section>\n        <a href={\"https://github.com/ermineaweb/tensorflowjs-react-linear\"}>\n          Sources\n        </a>\n        <a href={\"https://romainamichaud.com\"}>My blog</a>\n      </section>\n    </div>\n  );\n}\n\nexport default TensorflowApp;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport TensorflowApp from \"./TensorflowApp\";\nimport \"./style.css\";\n\nReactDOM.render(<TensorflowApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}